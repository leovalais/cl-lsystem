(in-package :cl-lsystem)

(defun apply-initial-direction (lsystem env)
  (if-let (d (initial-direction lsystem))
    (setf (direction (turtle env))
          d)))

(defun process (sexp n &optional
                         (env (make-instance 'png-environment))
                         (filename "out"))
  (let* ((lsystem (parse sexp))
         (word (expand (grammar lsystem) n)))
    (apply-initial-direction lsystem env)
    (iter (for letter in-vector word)
      (let ((instruction (gethash letter (mapping lsystem))))
        (assert instruction nil "no instruction for ~a" letter)
        (eval instruction env)))
    (save env filename)
    :ok))

(defun tree-test (&optional (n 6) (filename "tree-test"))
  (when-let (f (probe-file (format nil "~a.obj" filename)))
    (format t "~&~a deleted" f)
    (delete-file f))
  (format t "~&generating *tree-test* for n=~a into ~a.obj" n filename)
  (process *tree-test* n (make-instance 'obj-environment) filename))
